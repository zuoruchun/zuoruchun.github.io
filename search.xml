<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>code_reproduction_guide</title>
      <link href="/2024/12/13/code-reproduction-guide/"/>
      <url>/2024/12/13/code-reproduction-guide/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习代码复现指南">深度学习代码复现指南</h1><h2 id="环境配置基础检查">1. 环境配置基础检查</h2><p>安装不同版本的cuda，参见<ahref="https://blog.csdn.net/qq_50677040/article/details/140210921">CUDA多版本安装教程</a></p><h3 id="硬件环境检查">1.1 硬件环境检查</h3><ul><li>检查GPU型号：<code>nvidia-smi</code></li><li>确认CUDA版本：<code>nvidia-smi</code> 或<code>nvcc --version</code></li><li>检查显存大小是否满足要求</li><li>确认驱动版本是否最新</li></ul><h3 id="cuda环境管理">1.2 CUDA环境管理</h3><h4 id="多cuda版本共存">1.2.1 多CUDA版本共存</h4><ul><li>CUDA安装路径通常在： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/cuda-X.X  <span class="comment"># X.X 表示版本号</span></span><br></pre></td></tr></table></figure></li><li>管理多个CUDA版本： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建软链接</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/cuda-11.1 /usr/local/cuda-11.1</span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/local/cuda-11.4 /usr/local/cuda-11.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 ~/.bashrc 中添加环境变量切换函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">switch_cuda</span></span>() &#123;</span><br><span class="line">    sudo <span class="built_in">rm</span> /usr/local/cuda</span><br><span class="line">    sudo <span class="built_in">ln</span> -s /usr/local/cuda-<span class="variable">$1</span> /usr/local/cuda</span><br><span class="line">    <span class="built_in">export</span> CUDA_HOME=/usr/local/cuda</span><br><span class="line">    <span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$CUDA_HOME</span>/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line">    <span class="built_in">export</span> PATH=<span class="variable">$CUDA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="cuda版本切换">1.2.2 CUDA版本切换</h4><ul><li>使用函数切换CUDA版本： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">switch_cuda 11.1  <span class="comment"># 切换到CUDA 11.1</span></span><br><span class="line">nvcc --version    <span class="comment"># 验证版本</span></span><br></pre></td></tr></table></figure></li><li>每个项目使用独立的虚拟环境，避免版本冲突</li><li>记录每个项目使用的CUDA版本</li></ul><h4 id="驱动兼容性">1.2.3 驱动兼容性</h4><ul><li>NVIDIA驱动向后兼容，选择支持最新CUDA版本的驱动</li><li>查看驱动支持的最高CUDA版本： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi --query-gpu=driver_version --format=csv</span><br></pre></td></tr></table></figure></li><li><ahref="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">CUDA与驱动版本对应表</a></li></ul><h3 id="python环境准备">1.3 Python环境准备</h3><ul><li>使用conda创建独立环境： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n project_name python=X.X</span><br><span class="line">conda activate project_name</span><br></pre></td></tr></table></figure></li><li>确保pip是最新版本：<code>pip install --upgrade pip</code></li></ul><h2 id="依赖管理策略">2. 依赖管理策略</h2><h3 id="版本兼容性检查">2.1 版本兼容性检查</h3><ul><li>仔细阅读 requirements.txt</li><li>检查关键包之间的依赖关系：<ul><li>CUDA 与 深度学习框架版本</li><li>Python 与各个包的兼容版本</li><li>框架之间的版本依赖</li></ul></li></ul><h3 id="安装方法">2.2 安装方法</h3><ol type="1"><li><p>标准安装： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></p></li><li><p>特定版本安装： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从官方源安装特定版本</span></span><br><span class="line">pip install package==version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从Google Storage安装特定版本</span></span><br><span class="line">pip install package -f https://storage.googleapis.com/[package_name]_releases/</span><br></pre></td></tr></table></figure></p></li><li><p>本地wheel文件安装： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install /path/to/package.whl</span><br></pre></td></tr></table></figure></p></li><li><p>获取历史版本wheel文件：</p><ul><li>PyPI官方历史版本:https://pypi.org/project/[package_name]/#history</li><li>Google Storage (适用于JAX等):<ul><li>JAX:https://storage.googleapis.com/jax-releases/jax_releases.html</li><li>TensorFlow:<ul><li>官方归档:https://www.tensorflow.org/install/pip#package-location</li><li>历史版本: https://pypi.org/project/tensorflow/#history</li><li>GPU版本: https://www.tensorflow.org/install/pip#gpu</li></ul></li></ul></li><li>NVIDIA官方wheel库:https://developer.download.nvidia.com/compute/redist/</li><li>Anaconda历史版本库: https://repo.anaconda.com/pkgs/</li><li>清华镜像源:https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/</li><li>中科大镜像: https://pypi.mirrors.ustc.edu.cn/simple/</li></ul></li><li><p>特殊情况处理：</p><ul><li>对于已不在PyPI的旧版本，可以： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用特定版本的pip</span></span><br><span class="line">pip install pip==旧版本</span><br><span class="line">pip install package==目标版本</span><br><span class="line">pip install --upgrade pip  <span class="comment"># 完成后升级pip</span></span><br></pre></td></tr></table></figure></li><li>使用archive.org查找历史版本</li><li>在GitHub release页面寻找历史版本</li></ul></li></ol><h3 id="常见框架版本对应关系">2.3 常见框架版本对应关系</h3><h4 id="深度学习框架与cuda版本对应表">2.3.1深度学习框架与CUDA版本对应表</h4><table><thead><tr><th>框架</th><th>版本</th><th>支持的CUDA版本</th><th>Python版本</th></tr></thead><tbody><tr><td>TensorFlow</td><td>2.12.0</td><td>CUDA 11.2/11.8</td><td>3.8-3.11</td></tr><tr><td></td><td>2.11.0</td><td>CUDA 11.2/11.7</td><td>3.7-3.10</td></tr><tr><td></td><td>2.10.0</td><td>CUDA 11.2</td><td>3.7-3.10</td></tr><tr><td>PyTorch</td><td>2.1.0</td><td>CUDA 11.8/12.1</td><td>3.8-3.11</td></tr><tr><td></td><td>2.0.0</td><td>CUDA 11.7/11.8</td><td>3.8-3.11</td></tr><tr><td></td><td>1.13.1</td><td>CUDA 11.6/11.7</td><td>3.7-3.10</td></tr><tr><td>JAX</td><td>0.4.13</td><td>CUDA 11.8/12.0</td><td>3.9-3.11</td></tr><tr><td></td><td>0.4.8</td><td>CUDA 11.4/11.8</td><td>3.8-3.10</td></tr><tr><td></td><td>0.2.8</td><td>CUDA 11.1</td><td>3.7-3.8</td></tr></tbody></table><h4 id="其他cuda依赖包版本对应">2.3.2 其他CUDA依赖包版本对应</h4><table><thead><tr><th>包名</th><th>版本</th><th>需要的CUDA版本</th></tr></thead><tbody><tr><td>cupy</td><td>12.x</td><td>CUDA 11.2-12.x</td></tr><tr><td></td><td>11.x</td><td>CUDA 11.0-11.8</td></tr><tr><td>nvidia-dali</td><td>1.28.0</td><td>CUDA 11.0-12.1</td></tr><tr><td></td><td>1.24.0</td><td>CUDA 11.0-11.8</td></tr><tr><td>apex</td><td>23.08</td><td>CUDA 11.7/12.1</td></tr><tr><td></td><td>22.04</td><td>CUDA 11.3/11.7</td></tr><tr><td>horovod</td><td>0.28.1</td><td>CUDA 11.0+</td></tr><tr><td>tensorrt</td><td>8.6</td><td>CUDA 11.8-12.2</td></tr><tr><td></td><td>8.5</td><td>CUDA 11.0-11.8</td></tr></tbody></table><h2 id="代码复现流程">3. 代码复现流程</h2><h3 id="预处理阶段">3.1 预处理阶段</h3><ol type="1"><li>仔细阅读论文和代码文档</li><li>检查数据集要求和预处理步骤</li><li>确认硬件要求（GPU显存、CPU内存等）</li><li>查看是否需要预训练模型</li></ol><h3 id="环境配置阶段">3.2 环境配置阶段</h3><ol type="1"><li>创建独立的conda环境</li><li>按照版本要求安装依赖</li><li>验证关键包的安装： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&quot;import [package]; print([package].__version__)&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="运行阶段">3.3 运行阶段</h3><ol type="1"><li>先运行简单的示例或demo</li><li>使用小数据集验证代码可运行</li><li>逐步扩展到完整实验</li></ol><h2 id="常见问题解决">4. 常见问题解决</h2><h3 id="版本冲突解决">4.1 版本冲突解决</h3><ol type="1"><li>使用 <code>pip freeze</code> 检查当前环境</li><li>尝试降级或升级相关包</li><li>考虑使用兼容性更好的新版本</li><li>必要时修改源代码适配新版本</li></ol><h3 id="cuda相关问题">4.2 CUDA相关问题</h3><ol type="1"><li>确保CUDA工具链完整安装</li><li>检查CUDA_HOME环境变量</li><li>验证GPU是否被正确识别</li><li>考虑降级CUDA版本以匹配旧代码</li></ol><h3 id="内存问题">4.3 内存问题</h3><ol type="1"><li>检查batch size设置</li><li>监控GPU显存使用</li><li>使用梯度累��等技术减少内存占用</li></ol><h2 id="最佳实践">5. 最佳实践</h2><h3 id="版本控制">5.1 版本控制</h3><ul><li>使用git记录修改</li><li>保存完整的环境配置</li><li>记录所有修改和调试过程</li></ul><h3 id="实验记录">5.2 实验记录</h3><ul><li>记录运行参数</li><li>保存中间结果</li><li>记录复现过程中的问题和解决方案</li></ul><h3 id="性能优化">5.3 性能优化</h3><ul><li>根据硬件条件调整batch size</li><li>优化数据加载流程</li><li>考虑使用混合精度训练</li></ul><h2 id="注意事项">6. 注意事项</h2><ol type="1"><li>优先选择官方推荐的环境配置</li><li>记录所有修改和调试过程</li><li>保持与原作者的交流</li><li>建立完整的实验日志</li><li>定期备份实验数据和代码</li></ol><h2 id="常用资源">7. 常用资源</h2><h3 id="包版本查询">7.1 包版本查询</h3><ul><li>PyPI官方仓库</li><li>conda-forge</li><li>框架官方文档</li></ul><h3 id="cuda工具">7.2 CUDA工具</h3><ul><li>NVIDIA驱动下载</li><li>CUDA工具包下载</li><li>cuDNN下载</li></ul><h3 id="问题解决资源">7.3 问题解决资源</h3><ul><li>GitHub Issues</li><li>Stack Overflow</li><li>框架官方论坛</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>上传文件到服务器</title>
      <link href="/2024/10/22/UsefulUse/UploadFiletoServer/"/>
      <url>/2024/10/22/UsefulUse/UploadFiletoServer/</url>
      
        <content type="html"><![CDATA[<style>  img {      display: block;      margin-left: auto;      margin-right: auto;      width: 80%; /* 根据需要调整大小 */  }</style><p>要想完美的使用在本地就能操作远端服务器的文件，由于是无图形化界面，相比于图形化界面，获取文件的方式也发生了变化，由于是无图形化界面，无法使用浏览器进行下载。我们采用的方式也是使用ssh完成的，首先将需要在服务器中使用的文件下载到本地，这里以<code>DeepLearningPython</code>文件夹为例，使用ssh将它从本地上传到服务器，下面分为Mac和Windows分别进行介绍。</p><span id="more"></span><h1 id="mac">Mac</h1><p><strong>1.下载Termius</strong>首先点击下载<a href="https://termius.com/free-ssh-client-for-mac-os" style="color: #FF5733; text-decoration: none;">Termius</a></p><p><strong>2.配置ssh环境</strong></p><p>首先，点击newhost <img src="/pic/newhost.png" title="newhost"alt="img" /></p><!-- <p align="center">    <img src="/pic/newhost.png" alt="newhost" width="50%"></p> --><p>然后按照自己的ip和username进行配置之后,点击connect。 <imgsrc="/pic/turmius配置.png" title="turmius配置" alt="img" />出现下面的界面就意味着，登陆成功。 <img src="/pic/login.png"title="login" alt="img" /> 在SFTP界面点击selecthost，双击刚刚的host，然后就能看到右边的远端服务器的文件目录了，左边是本地的。<img src="/pic/selecthost.png" title="selecthost" alt="img" />下面需要上传什么文件就直接拖动文件就可以了。 <img src="/pic/SFTP.png"title="SFTP" alt="img" /> 等待传输完成。</p><h1 id="windows">Windows</h1><p>点击下载<a href="https://www.xshell.com/zh/free-for-home-school/" style="color: #FF5733; text-decoration: none;">XFTP</a>对于XFTP，需要注意的是，该软件使用一定时间之后需要重新到上述网站重新下载安装才能使用，时间大概是一个月（Xshell同理）</p><p>参考<a href="https://blog.csdn.net/m0_49448331/article/details/125767862" style="color: #FF5733; text-decoration: none;">CSDN</a>的教程.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh运行服务器中的代码</title>
      <link href="/2024/10/19/UsefulUse/UsetheServertoWriteCodeLocallyandCompileswithRemoteServer/"/>
      <url>/2024/10/19/UsefulUse/UsetheServertoWriteCodeLocallyandCompileswithRemoteServer/</url>
      
        <content type="html"><![CDATA[<style>  img {      display: block;      margin-left: auto;      margin-right: auto;      width: 80%; /* 根据需要调整大小 */  }</style><p><strong>1.获取服务器的username和ip</strong></p><p>在linux机器的终端输入<code>whoami</code>,终端返回的即是username；在linux机器的终端输入<code>ifconfig</code>,终端中的inet即为当前机器的ip地址，例如173.48.29.103；<img src="/pic/ip.png" title="ip" alt="img" /></p><p><strong>2.准备工作</strong></p><p>在VsCode中安装下面的插件：<br />Reomte Explorer, Remote - SSh, Remote - SSH:Editing, Remote - Tunnels,Remote Development;<br />于是在VsCode侧边栏会出现一个类似与电脑的图标。</p><span id="more"></span><figure><img src="/pic/ssh配置1.png" title="ssh配置1" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>3.连接</strong></p><p>点击加号, 输入<code>ssh username@ip</code>,之后会让你打开config配置文件, 按照下面的格式将服务器的Host添加进去 <imgsrc="/pic/config.jpg" title="config" alt="img" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host name# name可以任意填写</span><br><span class="line">HostName ip# 填写服务器ip</span><br><span class="line">Port 22# 服务器段口号（不作修改）</span><br><span class="line">User zuoruchun# 登陆用户名username</span><br></pre></td></tr></table></figure><p>保存配置文件。<br />之后就可以在侧边栏连接这个服务器了, 后面就可以使用VsCode在本地编写代码,然后使用服务器的poython解释器编译文件了。 <img src="/pic/ssh配置2.png"title="ssh配置2" alt="img" /> <strong>4.使用</strong></p><p>下面介绍如何利用ssh,在本地编写代码，使用远程服务器编译。如果不进行ssh连接，直接打开vscode，这个时候vscode左边代表的是本地文件夹，我们可以双击某个文件，比如python文件（matlab文件类似，需要安装matlab的插件），然后在窗口编辑代码，然后运行，这个是常规的本地运行。使用ssh后，运行远端服务器的代码也是类似，这不过这个时候，左侧的文件夹位置已经变成了远端服务器的文件地址，下面你就可以想象这个vscode不再是本地的vscode，而是远端服务器的vscode，类似打开文件夹的操作，他不会跳转到本地的文件地址，而是会跳转到远端的地址；同理，编辑代码界面也是一样，我们可以打开远端的一个python文件，类似于在本地编辑那样，对这个python文件进行修改，运行，这些都是在本地操作的，但是他们修改的实际上是远端的文件，运行的python解释器，CPU和GPU等等，使用的都是远端服务器上的。换句话说，除了在本地进行编辑操作，其他的操作实际上都是在远端服务器上进行的。</p><p><strong>5.备注</strong>ssh命令一般只能在同一个局域网之下才能够使用，如果不是同一个局域网，需要内网穿透，貌似大致就是买一个服务器，让两台电脑连接服务器的网络，就能够进行正常的ssh了。</p><h1id="但是最最最最重要的一点是可以使用motionpro连接校园网这同样保证了网络在同一局域网之下于是就能够保证即使不在学校依然能够使用进行ssh">但是最最最最重要的一点是，可以使用MotionPro连接校园网，这同样保证了网络在同一局域网之下，于是就能够保证即使不在学校，依然能够使用进行ssh！</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
